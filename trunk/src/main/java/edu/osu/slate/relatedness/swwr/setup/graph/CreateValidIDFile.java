/* Copyright 2010 Speech and Language Technologies Lab, The Ohio State University
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package edu.osu.slate.relatedness.swwr.setup.graph;

import java.io.*;
import java.util.*;

/**
 * This program generates a list of valid IDs for a Wikipedia data set.
 * <p>
 * The input is a Wikipedia page.sql file.
 * <p>
 * The output of this program is a .vid file containing an integer array object.  This is used to determine the valid IDs (non-redirect, in the given namespace) for our graph.  The .vid file is used as input for the {@link wwr.data.ValidIDs} constructor.  Additionally, this file will be used to 'compress' the IDs into a contiguous numbering system.
 * <p>
 * <b>usage:</b> java CreateValidIDFile HVMCT inputfile outputfile
 * <p>
 * <i>General Options:</i>
 * <UL>
 * <LI>[H] Print Help (this information)
 * <LI>[V] Verbose Output
 * </UL>
 * <i>Namespace Options:</i> (at least one of these must be specified)
 * <UL>
 * <LI>[M] Include Main Namespace
 * <LI>[C] Include Category Namespace
 * <LI>[T] Include Template Namespace
 * </UL>
 * <i>File Names:</i>
 * <UL>
 * <LI>[inputfile] Input page.sql file
 * <LI>[outputfile] Output .vid file
 * </UL>
 * 
 * @author weale
 * @version 1.0;alpha
 */
public class CreateValidIDFile {

	/* Name of the input file generated by Wikipedia (page.sql) */
	private static String inputFileName;

	/* Name of the output file (.vid) */
	private static String outputFileName;

	/* Appropriate Namespaces */
	private static TreeSet<String> ns;
	
	/* Verbose output flag */
	private static boolean verbose;
	
	/**
	 * This method checks the command-line parameters for proper formatting.
	 * <p> 
	 * If the parameters aren't properly formatted, the usage information is printed to the screen
	 * and the program exits. Otherwise, the filenames and input flags are set and execution
	 * begins.
	 * 
	 * @param args Input arguments containing command-line parameters
	 */
	private static void checkFlags(String [] args) {
		if(args.length < 3 || args[0].indexOf('H') != -1) {
			printUsage();
			System.exit(1);
		}
		
		//Set Verbose Flag
		verbose = (args[0].indexOf('V') != -1);
		
		//Set Namespaces
		ns = new TreeSet<String>();
		if(args[0].indexOf('M') != -1) {
			ns.add("0");
		}
		if(args[0].indexOf('C') != -1) {
			ns.add("14");
		}
		if(args[0].indexOf('T') != -1) {
			ns.add("10");
		}
		
		//Set File Names
		inputFileName = args[1];
		outputFileName = args[2];
	}
	
	/**
	 * Prints the help text to the screen
	 */
	private static void printUsage() {
		System.out.println("usage: java CreateValidIDFile HVMCT inputfile outputfile");
		System.out.println();
		System.out.println("General Options:");
		System.out.println("[H] Print Help (this information)");
		System.out.println("[V] Verbose Output");
		System.out.println();
		System.out.println("Namespace Options: (at least one of these must be specified)");
		System.out.println("[M] Include Main Namespace");
		System.out.println("[C] Include Category Namespace");
		System.out.println("[T] Include Template Namespace");
		System.out.println();
		System.out.println("File Names:");
		System.out.println("[inputfile] Input page.sql file");
		System.out.println("[outputfile] Output .vid file");
	}
	
	/**
	 * Checks and opens the input file.
	 * 
	 * @return Scanner for reading the input file
	 */
	private static Scanner openInputFile() {
		try {
			Scanner in = new Scanner(new FileReader(inputFileName));
			return in;		
		} catch (FileNotFoundException e) {
			System.out.println("File not found: " + inputFileName);
			e.printStackTrace();
		}
		
		System.exit(1);
		return null;	
	}
	
	/**
	 * Checks and opens the output file.
	 * 
	 * @return ObjectOutputStream for writing
	 */
	private static ObjectOutputStream openOutputFile() {
		try {
			ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(outputFileName));
			return out;		
		} catch (FileNotFoundException e) {
			System.out.println("File not found: " + outputFileName);
			e.printStackTrace();
		} catch (IOException e) {
			System.out.println("Problem with file: " + outputFileName);
			e.printStackTrace();
		}
		
		System.exit(1);
		return null;
	}

	/**
	 * Runs the program.
	 * 
	 * @param args Command-line parameters
	 * 
	 */
	public static void main(String[] args) {
		//"/scratch/weale/data/source/20080103/enwiki-20080103-page.sql"
		checkFlags(args);
		
		/* Open input and output files */
		Scanner in = openInputFile();
		ObjectOutputStream out = openOutputFile();
		
		/* STEP 1
		 * 
		 * Create the linked list of valid ids.
		 * 
		 * IDs are valid if they are:
		 * 1. In the appropriate namespace
		 * 2. Not redirect pages
		 * 
		 */
		LinkedList<Integer> ll = new LinkedList<Integer>();
		
	    String str = in.nextLine();
	    while(str.indexOf("INSERT INTO") == -1) {
	      str = in.nextLine();
	    }
	    
	    int tmp = 0;
	    while(tmp < 3 && str != null && !str.trim().equals("")) {
	      str = str.substring(str.indexOf("(")+1, str.length()-3);

	      // Split the String into the page information
	      String [] arr = str.split("\\d\\),\\(");
	      for(int i=0;i<arr.length;i++) {
	    	  //System.out.println(arr[i]);
	    	  String [] info = arr[i].split(",");
	    	  
		      // Check if the information is in the correct format
		      if(info.length >= 11) {
		    	  
		    	  // Extract page, namespace and redirect information
		    	  String page = info[0];
		          String namespace = info[1];
		          String redirect = info[info.length-6];
		          
		          // Sanity Check
		          // System.out.print(page + "\t\t" + namespace + "\t\t" + redirect);
		          
		          // Add the ID if it's in the needed namespace and not a redirect
		          if(ns.contains(namespace) && redirect.equals("0")) {
	        		  ll.add(new Integer(page));
		          }
		      }//end: if(info.length)
	      }//end: for(i)

	      if(verbose) {
	    	  System.out.print(".");
	      }
	      
	      str = in.nextLine();
	    }//end: while()
	    
	    /* STEP 2
	     * 
	     * Create new integer array of identical length.
	     * Copy values into array and sort array.
	     * 
	     */
	    int[] arr = new int[ll.size()];
	    Iterator<Integer> it = ll.iterator();
	    for(int i=0; i<arr.length;i++) {
	    	arr[i] = it.next();
	    }
		Arrays.sort(arr);
		
		/* STEP 3
		 * 
		 * Write int [] to object file.
		 */
		try {
			out.writeObject(arr);
		} catch (IOException e) {
			System.err.println("Problem writing IDs to file.");
			e.printStackTrace();
		}
		
		//Close files
		try {
			in.close();
			out.close();
		} catch (IOException e) {
			System.err.println("Problem closing input/output files.");
			e.printStackTrace();
		}
	}//end: main(args)
}//end: CreateValidIDFile
