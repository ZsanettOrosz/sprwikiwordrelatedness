package edu.osu.slate.relatedness.swwr.setup.category;

import java.io.*;
import java.util.*;

import wwr.data.category.*;
/**
 * Program creates category trees.
 * 
 * <ul>
 *   <li> Preceded by {@link CreateCategoryList} </li>
 *   <li> Followed by {@link CreateCategoryCounts} </li>
 * </ul>
 * 
 * @author weale
 *
 */
public class CreateCategoryAcyclicGraph {

	/* Name of the input file generated by Wikipedia (page.sql) */
	private static String inputFileName;

	/* Name of the output file (.vid) */
	private static String outputFileName;

	/* */
	private static String catFileName;
	
	/**
	 * @param args
	 * @throws IOException 
	 * @throws FileNotFoundException 
	 * @throws ClassNotFoundException 
	 */
	public static void main(String[] args) throws FileNotFoundException, IOException, ClassNotFoundException {
		
		/* Set parameters */
		String type = "enwiktionary";
		String date = "20090203";
		//String type = "enwiki";
		//String date = "20080103";
		
		/* Set file names */
		catFileName = "/scratch/weale/data/source/" +type+ "/" +date+ "/" +type+ "-" +date+ "-categorylinks.sql";
		inputFileName= "/scratch/weale/data/binary/" +type+ "/" +date+ "/" +type+ "-" +date+ "-page.cid";
		
		/* Open input file */
		ObjectInputStream in = new ObjectInputStream(new FileInputStream(inputFileName));		
	    System.out.println("Opening .cid file.");
	    CategoryTitleToIDTranslation Cat2ID = (CategoryTitleToIDTranslation)in.readObject();
	    IDToCategoryTitleTranslation ID2Cat = (IDToCategoryTitleTranslation)in.readObject();
		in.close();

	    /* Set Category Root */
		Scanner stdin = new Scanner(System.in);
		System.out.print("Enter Category Seed: ");
		String seed = stdin.nextLine();
		seed = "'" + seed.replace(" ", "_") + "'";	    
		
		if(!Cat2ID.isLookupCategory(seed)) {
			System.err.println("Invalid root category: " + seed);
			System.exit(1);
		}
		String str;
		int tmp;

		CategoryGraph ct = new CategoryGraph(seed);
		String[][] cats = ID2Cat.getNames();
		for(int i=0; i<cats.length; i++) {
			for(int j=0; cats[i] != null && j<cats[i].length; j++) {
				if(j>0)
					System.out.println(cats[i][j]);
				ct.addNode(cats[i][j]);
			}//end: for(j)
		}//end: for(i)
		ct.finalizeGraphNodes();
		/* STEP 1:
		 * 
		 * Add all CatGraph nodes
		 */
	    
		/* STEP 2:
		 * 
		 * Add all CatGraph edges
		 */
		System.out.println("Adding Edges");
		Scanner catIN = new Scanner(new FileReader(catFileName));
	    str = catIN.nextLine();
	    while(str.indexOf("INSERT INTO") == -1) {
	      str = catIN.nextLine();
	    }
		    
	    tmp = 0;
	    while(tmp < 3 && str != null && !str.trim().equals("")) {
	      str = str.substring(str.indexOf("(")+1, str.length()-3);
	
	      // Split the String into the page information
	      String [] arr = str.split("\\d\\),\\(");
	      for(int i=0;i<arr.length;i++) {
	    	  //System.out.println(arr[i]);
	    	  String [] info = arr[i].split(",");
		    	  
		      // Check if the information is in the correct format
		      if(info.length >= 4) {
			    	  
		    	  // Extract page, namespace and redirect information
		    	  String page = info[0];
			          
		    	  int breakSpot = -1;
		    	  String cat = info[1];
		    	  for(int j=2; breakSpot < 0 && j<info.length; j++) {
		    		  if(info[j-1].charAt(info[j-1].length()-1) == '\'' &&
		    			 info[j].charAt(0) == '\'') {
		    			  breakSpot = j;
		    		  } else {
			    		  cat = cat + "," + info[j];
		    		  }
		    	  }
		    	  
		          // Add the ID if it's in the needed namespace and not a redirect
		          if(ID2Cat.isLookupID(Integer.parseInt(page)) && ct.isMember(cat)) {
		        	  String [] arr2 = ID2Cat.getTitle(Integer.parseInt(page));
		        	  for(int k=0;k<arr2.length;k++) {
		        		  //System.out.println("Adding: " + cat +"->" + arr2[k]);
		        		  ct.addEdge(cat,arr2[k]);
		        	  }
		          }
		      }//end: if(info.length)
	      }//end: for(i)
		  System.out.println(".");
	      str = catIN.nextLine();
	    }//end: while()
		catIN.close();
	    //ct.print();
		System.out.println("Removing Cycles");
		ct.removeCycles();
		System.out.println("Trimming Graph");
		ct.trimGraphToRoot();
		
	    //System.out.println("Writing .cgraph file.");
		//ct.print();
		
	    /* Write .cgraph file */
	    System.out.println("Writing .cgraph file.");
		String outputFileName = "/scratch/weale/data/binary/" +type+ "/" +date+ "/" +type+ "-" +date+ "-" +seed+ ".cgraph";
	    ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(outputFileName));
	    out.writeObject(ct);
	    out.close();
	}//end: main()
}
